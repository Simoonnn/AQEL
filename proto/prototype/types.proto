syntax = "proto3";

option go_package = "prototype/.;prototype";

package rdo.prototype.types;

import "google/protobuf/descriptor.proto";
import "ext/options.proto";
import "validate/validate.proto";

message Block{
  uint64 num = 1;
  uint64 slot = 2;
  bytes version = 3 [(rdo.ext.opts.ssz_size) = "3"];
  bytes hash = 4 [(rdo.ext.opts.ssz_size) = "32"];
  bytes parent = 5 [(rdo.ext.opts.ssz_size) = "32"];
  uint64 timestamp = 6;
  bytes txroot = 7 [(rdo.ext.opts.ssz_size) = "32"];
  Sign proposer = 8;
  repeated Sign approvers = 9 [(rdo.ext.opts.ssz_max) = "128"];
  repeated Sign slashers = 10 [(rdo.ext.opts.ssz_max) = "128"];
  repeated Transaction transactions = 11 [(rdo.ext.opts.ssz_max) = "1500"];
}

message Sign{
  bytes address = 1 [(rdo.ext.opts.ssz_size) = "20"];
  bytes signature = 2 [(rdo.ext.opts.ssz_size) = "65"];
}

message Transaction{
  uint64 num = 1 [(validate.rules).uint64.gte = 0];
  uint32 type = 2 [(validate.rules).uint32 = {in: [1, 5, 6]}];
  uint64 timestamp = 3 [(validate.rules).uint64.gt = 0];
  bytes hash = 4 [(rdo.ext.opts.ssz_size) = "32", (validate.rules).bytes.len = 32];
  uint64 fee = 5 [(validate.rules).uint64.gt = 0];
  bytes data = 6 [(rdo.ext.opts.ssz_max) = "10000", (validate.rules).bytes.max_len = 10000]; // external byte data
  repeated TxInput inputs = 7 [(rdo.ext.opts.ssz_max) = "2000"];
  repeated TxOutput outputs = 8 [(rdo.ext.opts.ssz_max) = "2000"];
  bytes signature = 9 [(rdo.ext.opts.ssz_size) = "65", (validate.rules).bytes.len = 65];
  uint32 status = 10;
}

message TxInput {
  bytes hash = 1 [(rdo.ext.opts.ssz_size) = "32", (validate.rules).bytes.len = 32];
  uint32 index = 2;
  bytes address = 3 [(rdo.ext.opts.ssz_size) = "20", (validate.rules).bytes.len = 20];
  uint64 amount = 4 [(validate.rules).uint64.gt = 0];
}

message TxOutput{
  bytes address = 1 [(rdo.ext.opts.ssz_size) = "20", (validate.rules).bytes.len = 20];
  uint64 amount = 2 [(validate.rules).uint64.gt = 0];
  bytes node = 3 [(rdo.ext.opts.ssz_max) = "20", (validate.rules).bytes.len = 20, (validate.rules).bytes.ignore_empty=true];
}

message Metadata {
  uint64 headSlot = 1;
  uint64 headBlockNum = 2;
  bytes headBlockHash = 3 [(rdo.ext.opts.ssz_max) = "32", (validate.rules).bytes.len = 32];
}

message BlockRequest {
  uint64 startSlot = 1;
  uint64 count = 2;
  uint64 step = 3;
}
